파일
1. 데이터를 파일에 쓰고
	- file_put_contents
							(파일명, 데이터)
	참고) 파일을 쓰는 폴더는 반드시 쓰기권한이 있어야 한다
	
	현재 계정의 권한	그룹권한	다른 사용자의 권한
			rwx				rwx					rwx
	
	r(읽기)	-	4
	w(쓰기)	-	2
	x(실행)	-	1
	
	0 (권한 없음)
	
	6 (4 + 2, r + w)
	7 (4 + 2 + 1, r + w + x)
	
	chmod 권한 디렉토리명
	
	chmod 권한 -r 폴더/ 파일명
	
	-r  =  recursive -> 재귀적(하위 폴더도 모두 적용할때)
	
2. 파일에서 데이터를 읽는
	- file_get_contents
	
	-> 전체 파일을 읽고 -> 메모리에 임시 보관 -> 읽은 결과를 출력
	-> 큰파일을 읽을때 메모리 부족 현상이 발생
	-> 작은파일을 빠르게 읽고 쓸때
	
파일을 일정 버퍼만큼 담아서 읽고 다음 읽기 위치로 이동하는 방식
(스트리밍 방식 비슷)
버퍼만큼 읽고 -> 이동 -> 버퍼만큼 읽고 -> 이동
-> 버퍼만큼만 메모리를 차지
-> 대용량 파일도 메모리에 비교적 적은 영향을 주고 읽고 쓰기 가능

1. 파일을 열고
	- fopen(파일명, 처리모드)
	처리모드
		r	- 읽기]
		w	- 쓰기 - 기존 내용을 비우고 다시 쓸때
		a	- append -> 파일 내용의 끝에 추가 ( ex) - 로그 )
2. 
	읽고
		- 파일의 끝에 도달할때까지 버퍼에 담아서 이동하면서 읽기
			feof - END OF FILE - true - 파일의 끝에 도달 했는 경우
		- fgets -> 한줄 한줄 버퍼에 담아서 읽을때
	쓰기
		- fwrite -> 
3. 닫기
	- fclose - 파일 닫기
	
csv 파일 -> 읽고, 쓸수 있는 전용 함수
콤마 구분된 셀파일

대용량 데이터 엑셀 -> CSV 파일로 변환 -> PHP로 읽어서 -> DB에 반영 또는 수정

fgetcsv -> CSV 파일 읽기

fputcsv -> CSV 파일 쓰기

윈도우즈 EUC-KR
웹페이지 UTF-8

iconv -> 인코딩 변환

fputcsv -> CSV 파일 쓰기

파일 다운로드
Request Header	-> 사용자 쪽에서 요청한 데이터나 정보
Response Header -> 서버쪽에서 출력하는 데이터나 정보

출력 헤더 - header ( Response Header)
0. 파일의 종류가 뭔지?
	Content-Type: application/octet-stream
1. Content-Disposition: attachment; filename=다운로드 받을 파일명

헤더 하단에 실제 출력되는 데이터를 다운로드 파일명에 담아서 다운로드 처리